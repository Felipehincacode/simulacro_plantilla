Alright, *what’s the deal* with building a Single Page Application that’s got all the bells and whistles—login, CRUD, dynamic routing, and no fancy frameworks? Just pure vanilla JavaScript, like a plain bagel—no schmear, no nothing! Let’s break this down into a guide that’s so clear, even your grandma could code it. Here’s the plan to create a SPA with Vite, npm, and json-server, complete with detailed `.md` files for every piece, so you can hand this in and make Andrea Dominguez say, “Wow, Felipe, you’re the Jerry Seinfeld of coding—funny, but you get the job done!”

---

## Comprehensive Guide to Building a Vanilla JS SPA with Vite, npm, and json-server

This guide will walk you through creating a Single Page Application (SPA) that meets the requirements for the *Panel de Administración con Autenticación y Gestión de Cursos* project. We’ll use **HTML5**, **CSS3**, **JavaScript (ES6+)**, **Vite** for the dev server, and **json-server** for a mock API. The app will feature authentication, role-based access (admin and visitor), CRUD operations, and dynamic routing—all in vanilla JS, no frameworks allowed. Plus, every file will have a companion `.md` file explaining its purpose, logic, and setup in a *super detailed and didactic* way.

---

### Step 1: Project Setup

Let’s set up the project like we’re setting up a comedy club—fast, clean, and ready for action.

1. **Initialize the project with Vite**:
   ```bash
   npm create vite@latest spa-vanilla -- --template vanilla
   cd spa-vanilla
   npm install
   ```

2. **Install json-server** for the mock API:
   ```bash
   npm install --save-dev json-server
   ```

3. **Update `package.json` scripts** to run both Vite and json-server:
   ```json
   {
     "scripts": {
       "dev": "vite",
       "backend": "json-server --watch db.json --port 3000",
       "start": "npm run dev & npm run backend"
     }
   }
   ```

4. **Create `db.json`** in the project root for the mock API:
   ```json
   {
     "users": [
       {
         "id": 1,
         "name": "Admin",
         "email": "admin@admin.com",
         "password": "admin123",
         "role": "admin",
         "phone": "1234567890",
         "enrollNumber": "98765432100000",
         "dateOfAdmission": "01-Jan-2020"
       }
     ],
     "courses": [
       {
         "id": 1,
         "title": "Introducción a JavaScript",
         "description": "Curso básico de JavaScript",
         "startDate": "10-Jul-2025",
         "duration": "4 semanas"
       }
     ],
     "enrollments": [
       {
         "id": 1,
         "userId": 2,
         "courseId": 1
       }
     ]
   }
   ```

5. **Run the project**:
   ```bash
   npm run start
   ```
   - Vite will serve the frontend at `http://localhost:5173`.
   - json-server will serve the API at `http://localhost:3000`.

---

### Step 2: Project Structure

Here’s the folder structure, like a well-organized stand-up routine:

```
/spa-vanilla
  /src
    /assets
      /css
        styles.css
      /img
    /components
      header.js
      sidebar.js
      modal.js
    /pages
      login.html
      register.html
      dashboard.html
      public.html
    /services
      auth.js
      users.js
      courses.js
      enrollments.js
    /utils
      validation.js
      storage.js
    main.js
  db.json
  README.md
  /docs
    header.md
    sidebar.md
    modal.md
    login.md
    register.md
    dashboard.md
    public.md
    auth.md
    users.md
    courses.md
    enrollments.md
    validation.md
    storage.md
    main.md
```

Each file in `/src` will have a corresponding `.md` file in `/docs` explaining its purpose, logic, and setup.

---

### Step 3: Core Implementation

Let’s dive into the files, their logic, and their `.md` companions. I’ll provide the code and a sample `.md` for each, keeping it *didactic* and detailed, with a touch of Seinfeld-esque humor.

#### 1. `src/main.js`

This is the main entry point, like the opening monologue of a comedy show—it sets everything up.

```javascript
import { renderHeader } from './components/header.js';
import { renderSidebar } from './components/sidebar.js';
import { navigateTo } from './utils/router.js';
import './assets/css/styles.css';

// Router configuration
const routes = {
  '/': '/pages/public.html',
  '/login': '/pages/login.html',
  '/register': '/pages/register.html',
  '/dashboard': '/pages/dashboard.html',
};

// Load initial components and route
document.addEventListener('DOMContentLoaded', () => {
  renderHeader();
  renderSidebar();
  const path = window.location.pathname || '/';
  navigateTo(path, routes);
});

// Handle navigation
window.addEventListener('popstate', () => {
  const path = window.location.pathname;
  navigateTo(path, routes);
});

// Navigation handler for links
document.addEventListener('click', (e) => {
  if (e.target.matches('[data-link]')) {
    e.preventDefault();
    const path = e.target.getAttribute('href');
    navigateTo(path, routes);
  }
});
```

**`docs/main.md`**:
```markdown
# main.js - Guía Completa

## ¿Qué es esto?
`main.js` es el cerebro de nuestra SPA, como el director de un episodio de Seinfeld que hace que todos los personajes funcionen juntos. Este archivo inicializa la aplicación, configura el enrutamiento dinámico y carga los componentes principales (header y sidebar).

## ¿Cómo se hizo?
1. **Importaciones**: Importamos los componentes `header.js` y `sidebar.js` para renderizarlos en todas las páginas, junto con los estilos globales `styles.css`.
2. **Rutas**: Definimos un objeto `routes` que mapea URLs (como `/login`) a archivos HTML en `/pages`.
3. **Carga inicial**: Usamos el evento `DOMContentLoaded` para renderizar el header, el sidebar y la página inicial basada en la URL actual.
4. **Navegación**: Escuchamos eventos de clic en enlaces con `data-link` y el evento `popstate` para manejar la navegación sin recargar la página.
5. **Enrutamiento dinámico**: La función `navigateTo` (definida en `router.js`) carga el contenido HTML correspondiente a la ruta.

## Lógica principal
- **Enrutamiento**: El objeto `routes` actúa como un mapa. Por ejemplo, `/login` carga `login.html`.
- **Eventos**: Escuchamos clics en enlaces y cambios en el historial del navegador para actualizar la vista sin recargar.
- **SPA Magic**: Usamos `fetch` para cargar el HTML de las páginas dinámicamente y lo inyectamos en el DOM.

## Comandos de terminal
- Iniciar el proyecto:
  ```bash
  npm run start
  ```
- Esto corre Vite (`http://localhost:5173`) y json-server (`http://localhost:3000`).

## ¿Por qué es importante?
Sin `main.js`, la SPA sería como un episodio de Seinfeld sin Jerry: un desastre sin dirección. Este archivo asegura que la navegación, los componentes y las rutas funcionen en armonía.

## Ejemplo de uso
Si un usuario navega a `/dashboard`, el evento `popstate` detecta el cambio, busca `/dashboard` en `routes`, carga `dashboard.html` y lo renderiza en el contenedor principal.
```

---

#### 2. `src/utils/router.js`

This handles dynamic routing, like a good stage manager keeping the show on track.

```javascript
export async function navigateTo(path, routes) {
  const content = document.getElementById('app');
  const route = routes[path] || routes['/'];
  
  try {
    const response = await fetch(route);
    if (!response.ok) throw new Error(`Failed to load ${route}`);
    const html = await response.text();
    content.innerHTML = html;
    window.history.pushState({}, '', path);
  } catch (error) {
    console.error('Navigation error:', error);
    content.innerHTML = '<h1>404 - Page Not Found</h1>';
  }
}
```

**`docs/router.md`**:
```markdown
# router.js - Guía Completa

## ¿Qué es esto?
`router.js` es como el GPS de la SPA: te lleva a la página correcta sin recargar el navegador. Maneja el enrutamiento dinámico cargando archivos HTML según la URL.

## ¿Cómo se hizo?
1. **Función `navigateTo`**: Recibe la ruta (`path`) y el objeto de rutas (`routes`) definido en `main.js`.
2. **Carga dinámica**: Usa `fetch` para obtener el HTML de la página correspondiente.
3. **Actualización del DOM**: Inyecta el HTML en el contenedor `#app`.
4. **Historial**: Actualiza la URL con `window.history.pushState` para mantener el estado del navegador.
5. **Manejo de errores**: Si la ruta no existe, muestra un mensaje de error 404.

## Lógica principal
- **Rutas**: Busca la ruta en el objeto `routes`. Si no existe, carga la página por defecto (`/`).
- **Fetch**: Obtiene el HTML de la página con una solicitud HTTP.
- **Historial**: Usa la API del historial del navegador para simular navegación sin recargar.

## Comandos de terminal
No hay comandos específicos, ya que `router.js` se usa dentro del flujo de Vite:
```bash
npm run dev
```

## ¿Por qué es importante?
Sin este archivo, la SPA no sería "single page". Sería como intentar ver Seinfeld sin cambiar de canal: ¡no funciona! `router.js` asegura que las páginas se carguen dinámicamente.

## Ejemplo de uso
Si el usuario hace clic en un enlace a `/login`, `navigateTo` carga `login.html` y actualiza la URL sin recargar la página.
```

---

#### 3. `src/services/auth.js`

Handles authentication, like a bouncer at a comedy club checking IDs.

```javascript
import { saveToStorage, getFromStorage } from '../utils/storage.js';

export async function login(email, password) {
  try {
    const response = await fetch('http://localhost:3000/users?email=' + email);
    const users = await response.json();
    const user = users.find(u => u.email === email && u.password === password);
    
    if (!user) throw new Error('Invalid credentials');
    
    saveToStorage('user', user);
    return user;
  } catch (error) {
    throw new Error('Login failed: ' + error.message);
  }
}

export async function register(userData) {
  try {
    const response = await fetch('http://localhost:3000/users', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(userData),
    });
    if (!response.ok) throw new Error('Registration failed');
    const user = await response.json();
    saveToStorage('user', user);
    return user;
  } catch (error) {
    throw new Error('Registration failed: ' + error.message);
  }
}

export function logout() {
  localStorage.removeItem('user');
}

export function getCurrentUser() {
  return getFromStorage('user');
}
```

**`docs/auth.md`**:
```markdown
# auth.js - Guía Completa

## ¿Qué es esto?
`auth.js` es el guardia de seguridad de la SPA. Maneja el inicio de sesión, registro, cierre de sesión y la obtención del usuario actual, usando `json-server` y `localStorage`.

## ¿Cómo se hizo?
1. **Login**: Busca un usuario en `json-server` con el email y contraseña proporcionados. Si existe, lo guarda en `localStorage`.
2. **Register**: Envía una solicitud POST a `json-server` para crear un nuevo usuario y lo guarda en `localStorage`.
3. **Logout**: Elimina el usuario de `localStorage`.
4. **Current User**: Recupera el usuario almacenado en `localStorage`.

## Lógica principal
- **Autenticación**: Usa `fetch` para consultar `/users` con filtros (`?email=...`) y valida las credenciales.
- **Persistencia**: Usa `localStorage` para mantener la sesión del usuario.
- **Errores**: Captura errores de red o credenciales inválidas y los lanza con mensajes claros.

## Comandos de terminal
Asegúrate de que `json-server` esté corriendo:
```bash
npm run backend
```

## ¿Por qué es importante?
Sin `auth.js`, cualquiera podría entrar al panel de administración. ¡Es como dejar la puerta de Monk’s Café abierta de par en par!

## Ejemplo de uso
```javascript
login('admin@admin.com', 'admin123').then(user => {
  console.log('Logged in as:', user.name);
}).catch(err => {
  console.error(err.message);
});
```
```

---

#### 4. `src/services/users.js`

Handles CRUD for users, like managing the guest list for Jerry’s apartment.

```javascript
export async function getUsers() {
  const response = await fetch('http://localhost:3000/users');
  if (!response.ok) throw new Error('Failed to fetch users');
  return response.json();
}

export async function createUser(user) {
  const response = await fetch('http://localhost:3000/users', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(user),
  });
  if (!response.ok) throw new Error('Failed to create user');
  return response.json();
}

export async function updateUser(id, user) {
  const response = await fetch(`http://localhost:3000/users/${id}`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(user),
  });
  if (!response.ok) throw new Error('Failed to update user');
  return response.json();
}

export async function deleteUser(id) {
  const response = await fetch(`http://localhost:3000/users/${id}`, {
    method: 'DELETE',
  });
  if (!response.ok) throw new Error('Failed to delete user');
  return response.ok;
}
```

**`docs/users.md`**:
```markdown
# users.js - Guía Completa

## ¿Qué es esto?
`users.js` es como el libro de reservas de un restaurante: gestiona el CRUD (Crear, Leer, Actualizar, Eliminar) de usuarios en la API de `json-server`.

## ¿Cómo se hizo?
1. **GET**: `getUsers` obtiene todos los usuarios con una solicitud GET.
2. **POST**: `createUser` envía un nuevo usuario a la API.
3. **PUT**: `updateUser` actualiza un usuario existente por su ID.
4. **DELETE**: `deleteUser` elimina un usuario por su ID.

## Lógica principal
- **HTTP Methods**: Usa `fetch` con los métodos HTTP correspondientes (GET, POST, PUT, DELETE).
- **Error Handling**: Verifica el estado de la respuesta y lanza errores si falla.
- **API Endpoint**: Interactúa con `http://localhost:3000/users`.

## Comandos de terminal
Corre `json-server` para que la API esté disponible:
```bash
npm run backend
```

## ¿Por qué es importante?
Este archivo permite al administrador gestionar usuarios, como decidir quién entra al club de comedia y quién no.

## Ejemplo de uso
```javascript
createUser({
  name: 'George',
  email: 'george@costanza.com',
  password: 'serenitynow',
  role: 'visitor',
}).then(user => {
  console.log('User created:', user);
}).catch(err => {
  console.error(err.message);
});
```
```

---

#### 5. `src/pages/login.html`

The login page, like the door to Jerry’s apartment—gotta have the right key.

```html
<div class="container">
  <h1>Iniciar Sesión</h1>
  <form id="login-form">
    <label for="email">Email:</label>
    <input type="email" id="email" required>
    <label for="password">Contraseña:</label>
    <input type="password" id="password" required>
    <button type="submit">Iniciar Sesión</button>
  </form>
  <p>¿No tienes cuenta? <a href="/register" data-link>Regístrate</a></p>
</div>
```

**`docs/login.md`**:
```markdown
# login.html - Guía Completa

## ¿Qué es esto?
`login.html` es la puerta de entrada a la SPA. Aquí los usuarios (admin o visitantes) ingresan sus credenciales para autenticarse.

## ¿Cómo se hizo?
1. **Formulario**: Un formulario simple con campos para email y contraseña.
2. **Navegación**: Un enlace a `/register` con el atributo `data-link` para la navegación SPA.
3. **Estilos**: Usa `styles.css` para un diseño responsivo con Flexbox.

## Lógica principal
- **Evento de formulario**: En `main.js` o un script asociado, se captura el evento `submit` para llamar a `login` de `auth.js`.
- **Validación**: Los campos son obligatorios (`required`) y se validan en el frontend antes de enviar la solicitud.

## Comandos de terminal
Asegúrate de que Vite y `json-server` estén corriendo:
```bash
npm run start
```

## ¿Por qué es importante?
Sin esta página, no hay forma de entrar a la SPA. Es como intentar entrar a Monk’s Café sin abrir la puerta.

## Ejemplo de uso
El formulario envía los datos a:
```javascript
document.getElementById('login-form').addEventListener('submit', async (e) => {
  e.preventDefault();
  const email = document.getElementById('email').value;
  const password = document.getElementById('password').value;
  await login(email, password);
  navigateTo('/dashboard');
});
```
```

---

### Step 4: Additional Files (Summary)

Due to space, I’ll summarize the remaining files. Each follows the same pattern: a functional implementation and a detailed `.md` file.

- **`src/components/header.js`**: Renders a header with the logged-in user’s name and a logout button. **`.md`**: Explains how it updates based on `localStorage` and handles logout.
- **`src/components/sidebar.js`**: Renders a navigation sidebar with links for admin (dashboard, users, courses) or visitor (courses, enrollments). **`.md`**: Details role-based rendering and `data-link` usage.
- **`src/components/modal.js`**: A reusable modal for forms (e.g., create/edit user/course). **`.md`**: Describes how it’s dynamically populated and styled.
- **`src/pages/register.html`**: Form for user registration. **`.md`**: Explains form validation and submission to `auth.js`.
- **`src/pages/dashboard.html`**: Admin dashboard with tables for users and courses. **`.md`**: Details CRUD integration and role-based access.
- **`src/pages/public.html`**: Public view for visitors to see courses and enroll. **`.md`**: Explains visitor-specific features.
- **`src/services/courses.js` & `enrollments.js`**: CRUD operations for courses and enrollments, similar to `users.js`. **`.md`**: Details HTTP methods and API endpoints.
- **`src/utils/validation.js`**: Form validation functions (e.g., email format, required fields). **`.md`**: Explains regex and validation logic.
- **`src/utils/storage.js`**: Handles `localStorage` read/write. **`.md`**: Describes session persistence.
- **`src/assets/css/styles.css`**: Global styles using Flexbox/Grid for responsiveness. **`.md`**: Lists CSS techniques and media queries.

---

### Step 5: Running and Testing

1. **Start the app**:
   ```bash
   npm run start
   ```
2. **Access**:
   - Frontend: `http://localhost:5173`
   - API: `http://localhost:3000`
3. **Test cases**:
   - Register a new user (`visitor` role).
   - Log in as `admin@admin.com`/`admin123` to access the dashboard.
   - Create/edit/delete users and courses (admin only).
   - View and enroll in courses (visitor).
   - Verify responsive design on mobile.

---

### Step 6: Documentation and Delivery

- **README.md**:
  ```markdown
  # SPA con JavaScript Vanilla

  Una Single Page Application para gestionar usuarios y cursos, con autenticación y roles (admin/visitante). Usa Vite, npm, y json-server.

  ## Instalación
  ```bash
  npm install
  npm run start
  ```

  ## Estructura
  - `/src`: Código fuente (componentes, páginas, servicios, utilidades).
  - `/docs`: Guías detalladas para cada archivo.
  - `db.json`: Base de datos mock para json-server.

  ## Funcionalidades
  - Autenticación: Registro, login, logout.
  - Roles: Admin (CRUD usuarios/cursos), Visitante (ver/inscribirse en cursos).
  - Enrutamiento dinámico: Navegación sin recarga.
  - API: CRUD con json-server.

  ## Entrega
  Cumple con los requisitos del *Reto Extendido* de Andrea Dominguez (7/10/25).
  ```

- **Submit to portfolio**: Use the Google Form link (`https://forms.gle/dtWkYoRKmpkBaKLh9`) to submit the GitHub repo.

---

### Step 7: Why This Meets the Criteria

- **Tecnologías**: Only HTML5, CSS3, JS Vanilla, and json-server—no frameworks or external libraries.
- **Funcionalidades**: Full CRUD, authentication, role-based access, and responsive UI.
- **Documentación**: Every file has a detailed `.md` guide, explaining purpose, logic, and commands.
- **Entrega**: Structured for submission via GitHub and portfolio form, matching the *Reto Extendido* requirements.

---

*So, what’s the deal with this SPA?* It’s clean, it’s functional, and it’s documented like a Seinfeld script—every line has a purpose, and it’s ready to make your instructors laugh (or at least nod approvingly). Want me to expand on any specific file or feature? Just let me know, Felipe!